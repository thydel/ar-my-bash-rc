#!/bin/bash

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PROMPT_COMMAND='history -a; echo -ne "\033]0;${USER}@${HOSTNAME}: ${PWD/$HOME/~}\007"'
    ;;
#screen)
#    PROMPT_COMMAND='history -a; st'
#    ;;
*)
    PROMPT_COMMAND='history -a'
    ;;
esac

export TMPDIR=/var/tmp

THY=thy
export HOST=$(hostname -s)
export HISTDIR=~/.bash_history.d/$HOST

export TTY=$(test -t 0 && basename $(tty) || echo no-tty)

export HISTFILE=$HISTDIR/.bash_history-$TTY
mkdir -p $HISTDIR; chown $THY $HISTDIR
touch $HISTFILE; chown $THY $HISTFILE

shopt -s histappend
shopt -s cmdhist
export HISTSIZE_=50000
export HISTSIZE=$HISTSIZE_
export HISTCONTROL_=ignoreboth
export HISTCONTROL=$HISTCONTROL_
export HISTTIMEFORMAT='%F+%T '
export HISTIGNORE_='history:st:hg st:htop:clear:df -h:mount:env:xterm:pwd:sshh:date'
export HISTIGNORE="$HISTIGNORE_"

export LOGDIR=~/.bash-logs.d/$HOST
export LOGFILE=$LOGDIR/.bash-log-$TTY
mkdir -p $LOGDIR; chown $THY $LOGDIR
touch $LOGFILE; chown $THY $LOGFILE
hlog () {
    local h=$(history 1 | awk '{$1=_}1');
    local date=$(echo $h | awk '{print$1}' | tr -d '\n');
    local cmd=$(echo $h | awk '{$1=_}1' | cut -b 2-)
    echo -e "(TTY=\0001$TTY\0001 USER=\0001${USER}\0001 cd \0001$(pwd)\0001;\0001${cmd}\0001) # \0001${date}";
}
export PROMPT_COMMAND+='; hlog >> $LOGFILE'

hfa () { cat ~/.bash_history $HISTDIR/.bash_history-* | grep -i "$1"; }
hf () { hfa "$1" | sort -u; }

hist-file() { echo history | env -i HISTFILE="$1" HISTSIZE=$HISTSIZE_ HISTCONTROL=$HISTCONTROL_ HISTIGNORE="$HISTIGNORE_" HISTTIMEFORMAT="%F+%T " bash --norc -i 2> /dev/null; }
histhost() { if test "$1"; then echo $HISTDIR/../$1; else echo $HISTDIR; fi; }
hh() { source <(find $(histhost $2) -maxdepth 1 -type f | xargs grep -l "$1" | xargs -i echo "hist-file {} | grep '$1'") | sort -k2; }
hhh() { hh "$1" $2 | c 4-; }

h() { helper; }
c() { tr -s ' ' | cut -d' ' -f$1; }

mscreen () { screen -c ~/.screenrc-$1 -RdS $1; }

sshs () { ssh -AXt -o StrictHostKeyChecking=no -o ServerAliveInterval=20 ${1:-nil} ${2:+-p $2} bash -l -i -c 'ssh_; exec screen -RdS thy'; }

stw () { echo -ne "\033]0;${USER}@${HOSTNAME}: ${PWD/$HOME/~}\007"; }
sts () { echo -ne '\ek'"${USER}@$(hostname -s): ${PWD/$HOME/~}"'\e\\'; }
st () { stw; sts; }

stsn () { echo -ne '\ek'"$1"'\e\\'; }

ssh_ () {
	SSHVARS="SSH_CLIENT SSH_TTY SSH_AUTH_SOCK SSH_CONNECTION DISPLAY"

	for x in ${SSHVARS} ; do
	    (eval echo $x=\$$x) | sed  's/=/="/
	                                s/$/"/
	                                s/^/export /'
	done 1> ~/.ssh_

	for x in ${SSHVARS} ; do
	    (eval echo $x=\$$x) | sed  's/=/" "/
	                                s/$/")/
	                                s/^/(setenv "/'
	done 1> ~/.ssh.el
}

sshh () { source ~/.ssh_; ssh-add -l; }

fixbrokengdm3 () { xauth -f ~/.Xauthority nlist | xauth nmerge -; }
rfixbrokengdm3ssh () { ssh $1 xauth merge $(ssh $1 -l root echo /var/run/gdm3/auth-for-$USER*)/database; }
mx2x () { ssh -XC $1 x2x -west -to :0; }

mscreen () { screen -c ~/.screenrc-$1 -RdS $1; }
xscreen () { screen -c ~/.screenrc-$1 -x $1; }
sts2 () { echo -ne '\ek'"$1"'\e\\'; }
sshs2 () { sts2 $1; ssh -AXt -o StrictHostKeyChecking=no -o ServerAliveInterval=20 ${1:-nil} ${2:+-p $2} bash -l -i -c 'ssh_; exec screen -RdS thy'; }

showswap () { find /proc -maxdepth 2 -mmin +1 -name status | xargs grep -l VmSwap | xargs grep -h -e Name -e Swap -e Tgid | cut -d: -f2 | paste - - - | column -t | sort -nr -k3 | grep -v ' 0 '; }

if [ $TILIX_ID ] || [ $VTE_VERSION ]; then
        source /etc/profile.d/vte-2.91.sh
fi

export SSH_AUTH_SOCK=/run/user/$(id -u thy)/user-ssh-agent.socket
